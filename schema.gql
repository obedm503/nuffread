scalar Date


type Query {
  searchBooks(query: String, paginate: PaginationInput): PaginatedBooks!
  search(
    query: String
    maxPrice: Int
    minPrice: Int
    paginate: PaginationInput
  ): PaginatedListings!
  top(paginate: PaginationInput): PaginatedListings!

  me: SystemUser

  listing(id: ID!): Listing
  book(id: ID!): Book

  users: [User!]!
  schools: [School!]!
  sessions: [Session!]!

  searchGoogle(query: String!): [GoogleBook!]
  googleBook(id: ID!): GoogleBook!

  thread(id: ID!): Thread
}

type Mutation {
  register(email: String!, password: String!): User!
  resendConfirmEmail(email: String!): Boolean!
  confirm(code: String!): Boolean!
  login(email: String!, password: String!, type: SystemUserType!): SystemUser!
  logout: Boolean!
  requestResetPassword(email: String!): Boolean!
  resetPassword(token: String!, password: String!): Boolean!

  setSchoolName(id: ID!, name: String!): School!

  createListing(listing: ListingInput!): Listing!
  deleteListing(id: ID!): Boolean
  saveListing(listingId: ID!, saved: Boolean!): Listing!
  sellListing(listingId: ID!, price: Int!): Listing!
  setPrice(listingId: ID!, price: Int!): Listing!

  toggleUserTrackable: User!

  startThread(listingId: ID!): Thread!
  sendMessage(threadId: ID!, content: String!): Message!
}

type Subscription {
  newMessage: Message
}

enum SystemUserType {
  ADMIN
  USER
}

enum ListingCondition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  ACCEPTABLE
}

input PaginationInput {
  limit: Int
  offset: Int
}
type PaginatedListings {
  items: [Listing!]!
  totalCount: Int!
}
type PaginatedBooks {
  items: [Book!]!
  totalCount: Int!
}

type User {
  id: ID!

  email: String!
  name: String
  photo: String
  isTrackable: Boolean!

  listings: [Listing!]!
  recent: [Listing!]!
  saved(paginate: PaginationInput): PaginatedListings!

  confirmedAt: Date
  schoolName: String @deprecated(reason: "use school.name instead")
  school: School!

  threads(paginate: PaginationInput): PaginatedThreads!
}

input UserInput {
  name: String!
}

type Admin {
  id: ID!

  email: String!
}

union SystemUser = Admin | User

type Listing {
  id: ID!
  createdAt: Date!
  price: Int!
  description: String!

  book: Book!
  user: User
  # references user.school without revealing much user information
  school: School!

  saved: Boolean
  soldAt: Date
  soldPrice: Int

  condition: ListingCondition
}

input ListingInput {
  googleId: String!
  price: Int!
  description: String!
  coverIndex: Int # optional for backwards compat reasons
  condition: ListingCondition # optional for backwards compat reasons
}

type Book {
  id: String!
  etag: String
  googleId: String
  authors: [String!]!
  isbn: [String!]!
  publishedAt: Date
  title: String!
  subTitle: String
  thumbnail: String

  listings(paginate: PaginationInput): PaginatedListings!
}

# book but without id
type GoogleBook {
  etag: String
  googleId: String!
  authors: [String!]!
  isbn: [String!]!
  publishedAt: Date
  title: String!
  subTitle: String
  thumbnail: String
  possibleCovers: [String!]!
}

type School {
  id: ID!
  # createdAt: Date!
  # updatedAt: Date!
  name: String!
  # only accessible to administrators
  domain: String!
}

type Session {
  id: ID!
  expiresAt: Date!

  user: SystemUser!
}

# chat system
type Thread {
  id: ID!

  # TODO: these may be unnsessary
  sellerId: ID!
  seller: User!
  buyerId: ID!
  buyer: User!

  otherId: ID!
  other: User!

  listingId: ID!
  listing: Listing!

  lastMessage: Message
  messages(paginate: PaginationInput): PaginatedMessages!
}
type PaginatedThreads {
  items: [Thread!]!
  totalCount: Int!
}
type Message {
  id: ID!
  createdAt: Date!

  threadId: ID!
  thread: Thread!
  fromId: ID!
  from: User!
  toId: ID!
  to: User!

  content: String!
}
type PaginatedMessages {
  items: [Message!]!
  totalCount: Int!
}
